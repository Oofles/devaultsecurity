<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DeVault-Security â€“ Scripting</title>
    <link>/blog/scripting/</link>
    <description>Recent content in Scripting on DeVault-Security</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/blog/scripting/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: Analyzing Logs with the Linux Sort Sandwich</title>
      <link>/blog/2021/09/04/analyzing-logs-with-the-linux-sort-sandwich/</link>
      <pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/2021/09/04/analyzing-logs-with-the-linux-sort-sandwich/</guid>
      <description>
        
        
        &lt;h1 id=&#34;analyzing-logs-with-the-linux-sort-sandwich&#34;&gt;Analyzing Logs with the Linux Sort Sandwich&lt;/h1&gt;
&lt;p&gt;In a perfect world, we&amp;rsquo;d always have access to a nice pretty graphical interface where all our data is co-located and happy. Unfortunately, that&amp;rsquo;s not always the case. Here I&amp;rsquo;ll walk through a really simple way to help with filtering or sorting through text-based logs using built-in Linux tools.&lt;/p&gt;
&lt;h2 id=&#34;tldr---the-result-up-front&#34;&gt;TL/DR - The Result Up Front!&lt;/h2&gt;
&lt;p&gt;Using Zeek (Bro) logs as an example, here are the top user-agents seen throughout all HTTP conversations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat http.log &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; zeek-cut user_agent &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; uniq -c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sort -r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/static/ua-complete.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;reading-the-logs&#34;&gt;Reading the Logs&lt;/h2&gt;
&lt;p&gt;In the example, I&amp;rsquo;ll be using Zeek logs which is an amazing open-source tool for analyzing network conversations. (Reference: &lt;a href=&#34;https://zeek.org/&#34;&gt;https://zeek.org/&lt;/a&gt;) However, the same technique can be used for any text-based logs since we&amp;rsquo;ll be using built-in Linux tools!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start by simply reading the file with the &lt;code&gt;cat&lt;/code&gt; (or concatenate) command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat http.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/cat-http.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Gross! Let&amp;rsquo;s try a different approach:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;less -S http.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/less-http.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ah, much cleaner - now we can see what we&amp;rsquo;re dealing with! Zeek logs are organized by tab-delimited columns. It makes lining up the data with their categories a little bit more complicated, but now we can see all kinds of useful data we might want metrics on.&lt;/p&gt;
&lt;h2 id=&#34;extracting-a-field-or-column&#34;&gt;Extracting a Field or Column&lt;/h2&gt;
&lt;p&gt;Zeek makes this process extremely easy if you know the field name, so we&amp;rsquo;ll look at that first. The &lt;code&gt;zeek-cut&lt;/code&gt; command will remove all columns and additional data points except the column you&amp;rsquo;ve specified.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat http.log | zeek-cut user_agent&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/zeekcut-ua.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Awesome! But what if you aren&amp;rsquo;t using Zeek? No worries - the &lt;code&gt;cut&lt;/code&gt; command does the same thing, but allows you to specify a field (or column) number and any delimiter!&lt;/p&gt;
&lt;p&gt;Same approach, but using &lt;code&gt;cut&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat http.log | cut -f 13 -d &amp;quot;	&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-f&lt;/code&gt; = allows you to specify a field (or column number). In this case, I just counted and found that the user-agent field was the 13th column from the left.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; = allows you to specify a delimiter. Since Zeek logs use tab delimiters, we actually don&amp;rsquo;t need to specify anything and &lt;code&gt;cut&lt;/code&gt; will automatically split it up properly! However, the delimiter can be anything you want it to be (dots, spaces, colons, semi-colons, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sort-sandwich&#34;&gt;Sort Sandwich!&lt;/h2&gt;
&lt;p&gt;Now that we&amp;rsquo;ve extracted the targeted field, we can use the &amp;ldquo;sort sandwich&amp;rdquo; to quick table of counted unique values.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sort&lt;/code&gt; = sorts lines of text alphanumerically (no surprise here!)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt; = reverses the sort so higher numbers appear on top&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;uniq&lt;/code&gt; = de-duplicates lines of text and reports only unique values&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt; = counts the number of times that unique value was seen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;cat http.log | zeek-cut user_agent | sort | uniq -c | sort -r&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/ua-complete.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here we can see all the unique user-agents seen throughout the captured traffic preempted by how many times each of these user-agents were used!&lt;/p&gt;
&lt;h3 id=&#34;why-sort-twice&#34;&gt;Why sort twice?&lt;/h3&gt;
&lt;p&gt;This is an interesting problem! The &lt;code&gt;uniq&lt;/code&gt; command does not read through an entire file and then give you unique values, it instead takes a top-down approach. Meaning, duplicate values must be directly next to each other.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at an example. Here we&amp;rsquo;ve got a sample text file with three columns.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat sample.txt&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;/static/cat-sample.png&#34; alt=&#34;image&#34; width=&#34;500&#34;/&gt;
&lt;br&gt;
&lt;br&gt;
There are duplicates, so let&#39;s try and de-duplicate the file and count the results.
&lt;p&gt;&lt;code&gt;cat sample.txt | uniq -c&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;/static/uniq-sample.png&#34; alt=&#34;image&#34; width=&#34;600&#34;/&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;Even though Vader shows up multiple times, we still see duplicate entries because it&amp;rsquo;s only getting rid of values if they are directly next to each other. To fully emphasize the point, let&amp;rsquo;s a look when we sort it first.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat sample.txt | sort | uniq -c&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;/static/sort-uniq-sample.png&#34; alt=&#34;image&#34; width=&#34;600&#34;/&gt;
&lt;br&gt;
&lt;br&gt; 
Beautiful! As your files get larger, being able to see top and bottom value counts becomes pretty important, so we&#39;d better sort it once more at the end!
&lt;p&gt;&lt;code&gt;cat sample.txt | sort | uniq -c | sort&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;/static/ss-sample.png&#34; alt=&#34;image&#34; width=&#34;700&#34;/&gt;
&lt;br&gt;
&lt;br&gt; 
&lt;h3 id=&#34;ahhh-the-spaces-and-unnecessary-lines&#34;&gt;Ahhh! The Spaces and Unnecessary Lines!&lt;/h3&gt;
&lt;p&gt;You may have noticed in the previous example that the column headers and blank lines are counted in the output. Using &lt;code&gt;grep&lt;/code&gt; and the inverse option (&lt;code&gt;-v&lt;/code&gt;), we can get rid of those lines!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep -v &amp;quot;column&amp;quot;&lt;/code&gt; = removes any lines containing the word &amp;ldquo;column&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Spaces are a bit more complicated, so without getting into regular expressions and how to format this out, I&amp;rsquo;ll just give you the syntax that works!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep -v &#39;^[[:space:]]*$&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;All together:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat sample.txt | grep -v &amp;quot;column&amp;quot; | grep -v &#39;^[[:space:]]*$&#39; | sort | uniq -c | sort&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/static/remove-spaces.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;other-examples&#34;&gt;Other Examples&lt;/h2&gt;
&lt;p&gt;Top IPs (most conversations) seen separated by application protocol. Note: Zeek has the ability to perform port-independent protocol detection, meaning that it will identify the application protocol being used regardless if it&amp;rsquo;s being seen over the &amp;ldquo;standard&amp;rdquo; port associated with that protocol.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat conn.log &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; zeek-cut id.orig_h service &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; uniq -c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sort -r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/static/ss-ip-service.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Looking for HTTP POST Methods and where that data is going.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat http.log &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; zeek-cut method host uri &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; grep &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; uniq -c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sort -r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/static/ss-post-host-uri.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Performing long-tail analysis on TLS Certificates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat ssl.log &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; zeek-cut issuer &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; uniq -c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sort -r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/static/ss-ssl-issuer.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: PowerShell - Counting Items in a CSV</title>
      <link>/blog/2020/08/29/powershell-counting-items-in-a-csv/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/08/29/powershell-counting-items-in-a-csv/</guid>
      <description>
        
        
        &lt;h2 id=&#34;problem&#34;&gt;Problem?&lt;/h2&gt;
&lt;p&gt;I needed to get a unique count of items in a CSV file. Specifically, this was part of converting a CSV to JSON. PowerShell actually makes this pretty simple, but there are a few considerations in the code.&lt;/p&gt;
&lt;h3 id=&#34;tldr---the-function&#34;&gt;TL/DR - The Function&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ll go on to explain each of these pieces in more detail, but if you are just here for the code, enjoy!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Import-Csv&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;csv&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;countUnique&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$column_name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$column_name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Sort-Object&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Get-Unique&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Measure-Object&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;$count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Only necessary if accounting for blank lines, otherwise remove &amp;#34;- 1&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$count&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;$value&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;countUnique&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;column_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;import&#34;&gt;Import&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start by importing the CSV file. PowerShell will convert all the data into a PS Object making it much easier to manipulate.&lt;/p&gt;
&lt;p&gt;We will assign this value to a variable so we can use the data later on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Import-Csv&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;csv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;referencing-the-column-or-field-name&#34;&gt;Referencing the Column or Field name&lt;/h2&gt;
&lt;p&gt;The header in a CSV file will be converted into the field names for each of the PowerShell objects. For instance, let&amp;rsquo;s use this CSV file as an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csv&#34; data-lang=&#34;csv&#34;&gt;id,first,last,classification
1,darth,vader,sith
2,baby,yoda,unknown
3,luke,skywalker,jedi
4,obi-wan,kenobi,jedi
5,darth,bane,sith
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we wanted to reference all the values in &amp;ldquo;classification&amp;rdquo;, we could output &lt;code&gt;$import.classification&lt;/code&gt; and our output would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sith
unknown
jedi
jedi
sith
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;getting-unique-values&#34;&gt;Getting unique values&lt;/h2&gt;
&lt;p&gt;Thankfully, PowerShell has a cmdlet called &lt;code&gt;Get-Unique&lt;/code&gt; which makes this super simple! The problem is we can&amp;rsquo;t use this by itself if we truly want only unique values. As an test, let&amp;rsquo;s take a look at our previous example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;ps &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;classification&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Get-Unique&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;sith&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;unknown&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;jedi&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;sith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Even though we wanted unique values, &amp;ldquo;sith&amp;rdquo; actually shows up twice&amp;hellip; Why did this happen? Well, &lt;code&gt;Get-Unique&lt;/code&gt; will extract unique values using a top-down approach. This works the same way as the Linux command: &lt;code&gt;uniq&lt;/code&gt;. So we solve this by sorting the values first with the &lt;code&gt;Sort-Object&lt;/code&gt; cmdlet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;ps &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;classification&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Sort-Object&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Get-Unique&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;jedi&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;unknown&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;sith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;counting-values&#34;&gt;Counting values&lt;/h2&gt;
&lt;p&gt;Great! So now we have unique values, how do we count them? Let&amp;rsquo;s use another useful cmdlet, &lt;code&gt;Measure-Object&lt;/code&gt;. This will give us some useful statistics (count, average, sum, maximum, and minimum). For strings, the only really useful stat is &amp;ldquo;count&amp;rdquo; which is exactly what we need!&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll take everything we&amp;rsquo;ve done before, and assign it all to a variable. Then we can call the variable.count to return just the count number.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;classification&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Sort-Object&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Get-Unique&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Measure-Object&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using our example, &lt;code&gt;$stats.Count&lt;/code&gt; should now be equal to 3.&lt;/p&gt;
&lt;p&gt;Another consideration is if you have blank values in your CSV file. There are a few different ways to manage this, but the simplest would be to subtract your final count value by 1.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;
&lt;h3 id=&#34;simplified-code&#34;&gt;Simplified Code&lt;/h3&gt;
&lt;p&gt;Ok, let&amp;rsquo;s bring it all together. If you just need to perform this action once, here&amp;rsquo;s the simple code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Import-Csv&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;csv&lt;/span&gt; 
&lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;column_name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Sort-Object&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Get-Unique&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Measure-Object&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;$count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Only necessary if accounting for blank lines, otherwise just remove &amp;#34;- 1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure to replace &lt;code&gt;column_name&lt;/code&gt; with the value of your desired column name. Now you can use the &lt;code&gt;$count&lt;/code&gt; variable which will be the unique value of the desired column.&lt;/p&gt;
&lt;h3 id=&#34;function&#34;&gt;Function&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;ll need to perform this action more than once, you should probably functionize it! (I&amp;rsquo;m not sure if that&amp;rsquo;s a real word&amp;hellip;)&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll start by created a global variable for the imported file - you don&amp;rsquo;t want this to be inside your function in case you need to manipulate the data in other functions.&lt;/p&gt;
&lt;p&gt;Within the function, we&amp;rsquo;ll add the ability to pass in data via the &lt;code&gt;$column_name&lt;/code&gt; variable. We&amp;rsquo;ll also need to return a value ouside of the function, and we can do that with &lt;code&gt;return $count&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Import-Csv&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;csv&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;countUnique&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$column_name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$column_name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Sort-Object&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Get-Unique&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Measure-Object&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;$count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Only necessary if accounting for blank lines, otherwise remove &amp;#34;- 1&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$count&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;$value&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;countUnique&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;column_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, you&amp;rsquo;ll need to replace &lt;code&gt;&amp;quot;column_name&amp;quot;&lt;/code&gt; with the value of your desired column name.&lt;/p&gt;
&lt;p&gt;Congratulations! Now you&amp;rsquo;ve got a way to count unique values in a CSV!&lt;/p&gt;
&lt;h4 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Oofles/PowerShell-Scripts&#34;&gt;My PowerShell Scripts on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/?view=powershell-7&#34;&gt;Microsoft PowerShell Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
