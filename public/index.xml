<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DeVault-Security â€“ DeVault Security</title>
    <link>/</link>
    <description>Recent content in DeVault Security on DeVault-Security</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
      
      
    
    
    <item>
      <title>Blog: PowerShell - Counting Items in a CSV</title>
      <link>/blog/2020/08/29/powershell-counting-items-in-a-csv/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/08/29/powershell-counting-items-in-a-csv/</guid>
      <description>
        
        
        &lt;h2 id=&#34;problem&#34;&gt;Problem?&lt;/h2&gt;
&lt;p&gt;I needed to get a unique count of items in a CSV file. Specifically, this was part of converting a CSV to JSON. PowerShell actually makes this pretty simple, but there are a few considerations in the code.&lt;/p&gt;
&lt;h3 id=&#34;tldr---the-function&#34;&gt;TL/DR - The Function&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ll go on to explain each of these pieces in more detail, but if you are just here for the code, enjoy!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Import-Csv&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;csv&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;countUnique&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$column_name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$column_name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Sort-Object&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Get-Unique&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Measure-Object&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;$count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Only necessary if accounting for blank lines, otherwise remove &amp;#34;- 1&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$count&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;$value&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;countUnique&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;column_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;import&#34;&gt;Import&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start by importing the CSV file. PowerShell will convert all the data into a PS Object making it much easier to manipulate.&lt;/p&gt;
&lt;p&gt;We will assign this value to a variable so we can use the data later on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Import-Csv&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;csv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;referencing-the-column-or-field-name&#34;&gt;Referencing the Column or Field name&lt;/h2&gt;
&lt;p&gt;The header in a CSV file will be converted into the field names for each of the PowerShell objects. For instance, let&amp;rsquo;s use this CSV file as an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csv&#34; data-lang=&#34;csv&#34;&gt;id,first,last,classification
1,darth,vader,sith
2,baby,yoda,unknown
3,luke,skywalker,jedi
4,obi-wan,kenobi,jedi
5,darth,bane,sith
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we wanted to reference all the values in &amp;ldquo;classification&amp;rdquo;, we could output &lt;code&gt;$import.classification&lt;/code&gt; and our output would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sith
unknown
jedi
jedi
sith
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;getting-unique-values&#34;&gt;Getting unique values&lt;/h2&gt;
&lt;p&gt;Thankfully, PowerShell has a cmdlet called &lt;code&gt;Get-Unique&lt;/code&gt; which makes this super simple! The problem is we can&amp;rsquo;t use this by itself if we truly want only unique values. As an test, let&amp;rsquo;s take a look at our previous example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;ps &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;classification&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Get-Unique&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;sith&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;unknown&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;jedi&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;sith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Even though we wanted unique values, &amp;ldquo;sith&amp;rdquo; actually shows up twice&amp;hellip; Why did this happen? Well, &lt;code&gt;Get-Unique&lt;/code&gt; will extract unique values using a top-down approach. This works the same way as the Linux command: &lt;code&gt;uniq&lt;/code&gt;. So we solve this by sorting the values first with the &lt;code&gt;Sort-Object&lt;/code&gt; cmdlet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;ps &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;classification&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Sort-Object&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Get-Unique&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;jedi&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;unknown&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;sith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;counting-values&#34;&gt;Counting values&lt;/h2&gt;
&lt;p&gt;Great! So now we have unique values, how do we count them? Let&amp;rsquo;s use another useful cmdlet, &lt;code&gt;Measure-Object&lt;/code&gt;. This will give us some useful statistics (count, average, sum, maximum, and minimum). For strings, the only really useful stat is &amp;ldquo;count&amp;rdquo; which is exactly what we need!&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll take everything we&amp;rsquo;ve done before, and assign it all to a variable. Then we can call the variable.count to return just the count number.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;classification&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Sort-Object&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Get-Unique&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Measure-Object&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using our example, &lt;code&gt;$stats.Count&lt;/code&gt; should now be equal to 3.&lt;/p&gt;
&lt;p&gt;Another consideration is if you have blank values in your CSV file. There are a few different ways to manage this, but the simplest would be to subtract your final count value by 1.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;
&lt;h3 id=&#34;simplified-code&#34;&gt;Simplified Code&lt;/h3&gt;
&lt;p&gt;Ok, let&amp;rsquo;s bring it all together. If you just need to perform this action once, here&amp;rsquo;s the simple code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Import-Csv&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;csv&lt;/span&gt; 
&lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;column_name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Sort-Object&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Get-Unique&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Measure-Object&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;$count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Only necessary if accounting for blank lines, otherwise just remove &amp;#34;- 1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure to replace &lt;code&gt;column_name&lt;/code&gt; with the value of your desired column name. Now you can use the &lt;code&gt;$count&lt;/code&gt; variable which will be the unique value of the desired column.&lt;/p&gt;
&lt;h3 id=&#34;function&#34;&gt;Function&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;ll need to perform this action more than once, you should probably functionize it! (I&amp;rsquo;m not sure if that&amp;rsquo;s a real word&amp;hellip;)&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll start by created a global variable for the imported file - you don&amp;rsquo;t want this to be inside your function in case you need to manipulate the data in other functions.&lt;/p&gt;
&lt;p&gt;Within the function, we&amp;rsquo;ll add the ability to pass in data via the &lt;code&gt;$column_name&lt;/code&gt; variable. We&amp;rsquo;ll also need to return a value ouside of the function, and we can do that with &lt;code&gt;return $count&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Import-Csv&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;csv&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;countUnique&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$column_name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$import&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$column_name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Sort-Object&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Get-Unique&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Measure-Object&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;$count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$stats&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Count&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Only necessary if accounting for blank lines, otherwise remove &amp;#34;- 1&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$count&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;$value&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;countUnique&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;column_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, you&amp;rsquo;ll need to replace &lt;code&gt;&amp;quot;column_name&amp;quot;&lt;/code&gt; with the value of your desired column name.&lt;/p&gt;
&lt;p&gt;Congratulations! Now you&amp;rsquo;ve got a way to count unique values in a CSV!&lt;/p&gt;
&lt;h4 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Oofles/PowerShell-Scripts&#34;&gt;My PowerShell Scripts on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/?view=powershell-7&#34;&gt;Microsoft PowerShell Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Index on Ingest vs. on Search</title>
      <link>/blog/2020/08/23/index-on-ingest-vs.-on-search/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/08/23/index-on-ingest-vs.-on-search/</guid>
      <description>
        
        
        &lt;h2 id=&#34;index-time&#34;&gt;Index Time&lt;/h2&gt;
&lt;p&gt;To set the frame for this, let&amp;rsquo;s use two common databases used in Security: Elasticsearch and Splunk. Within any database, the data you ingest will need to be indexed so you can search across that data. Depending on your end goal, some additional consideration needs to be given for how that database operates.&lt;/p&gt;
&lt;p&gt;You can think of this like an index for a book. The index will contain page numbers for the words that you might need to look up. Similarly, our database will need to have a fast way to lookup where certain words exist in all our security logs. So, it creates an index.&lt;/p&gt;
&lt;p&gt;Creating this index takes processing power - and can take a decent amount of time to accomplish depending on your setup. So when do we perform this process?&lt;/p&gt;
&lt;h2 id=&#34;index-on-search-splunk&#34;&gt;Index on Search (Splunk)&lt;/h2&gt;
&lt;p&gt;Perhaps we want to wait until we perform searches to create the index. You might think this is silly, but this actually gives us a lot of flexibility in performing a search.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say that I don&amp;rsquo;t know what the logs coming into my database are going to look like. So when I read through some of the content, I find a place in the logs where a hostname exists. The problem is that the hostname is in the middle of a bunch of other text, and I don&amp;rsquo;t have a way to say, &amp;ldquo;Show me all the logs where the hostname is equal to X.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;At this point, even though the data has already been ingested, I can select the section where the hostname exists and define that field. Now I can search all my logs for the specified hostname - the database will index all existing documents - and return my results.&lt;/p&gt;
&lt;p&gt;This becomes extremely powerful when the log format is unknown, or you don&amp;rsquo;t have a lot of time to create the parser to define the logs fields before ingestion.&lt;/p&gt;
&lt;p&gt;The problem with this method depends on search complexity and log format. Every search you perform can require a full index of the logs. This means search results can take anywhere from a minute or two to a few hours to return!&lt;/p&gt;
&lt;h2 id=&#34;index-on-ingest-elasticsearch&#34;&gt;Index on Ingest (Elasticsearch)&lt;/h2&gt;
&lt;p&gt;So what&amp;rsquo;s the alternative? Let&amp;rsquo;s take a look at the log format ahead of time and define fields before they are ingested. In the case of Elasticsearch, that would be creating an ingest pipeline or using Logstash. Now when we ingest the data, the indexing is performed before we can perform any searches.&lt;/p&gt;
&lt;p&gt;The difficult part in this process is defining out every field we want to search or filter on. However, once that process is complete, the data has been pre-indexed so our searches return results extremely fast!&lt;/p&gt;
&lt;p&gt;Does this mean that once the data has been indexed, you are stuck with it? Nope - you&amp;rsquo;ll need to re-index the data and perform that operation again. Usually you&amp;rsquo;ll want to ingest some test logs until you&amp;rsquo;ve settled on a preferred index template.&lt;/p&gt;
&lt;h3 id=&#34;full-text-search&#34;&gt;Full-Text Search&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s important to note that both databases discussed offer the ability to perform full-text search. Meaning, I can search for the word &amp;ldquo;failed&amp;rdquo;, and all logs containing that word will be returned. The real question is how fast you want that result to come back.&lt;/p&gt;
&lt;h2 id=&#34;which-one-should-i-use&#34;&gt;Which one should I use?&lt;/h2&gt;
&lt;p&gt;Heads up, my opinion is biased! Well, so is everyone&amp;rsquo;s but maybe mine more so in this case? I do work for Elastic, but I&amp;rsquo;ve been a Splunk fanboy in the past. This is an unsponsored blog post, and I&amp;rsquo;m a strong proponent of using whatever tools work for your specific usecase!&lt;/p&gt;
&lt;p&gt;So to answer this question properly, you need to ask yourself some questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do I know what the logs look like?&lt;/li&gt;
&lt;li&gt;Do I know what fields I&amp;rsquo;ll need to perform searches or calculations on?&lt;/li&gt;
&lt;li&gt;How fast do I need the searches to return results?&lt;/li&gt;
&lt;li&gt;Do I have the time to create index patterns before security operations begin?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For me, most of my experience comes from performing incident response or threat hunting on known networks. In this case, I know what the fields look like and I need the search results to come back super fast! I&amp;rsquo;m willing to take the performance hit up-front, that way when frantically performing searches during an incident response, I&amp;rsquo;m not waiting on the database.&lt;/p&gt;
&lt;h5 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/documents-indices.html&#34;&gt;Elasticsearch - Data In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/ecs/current/ecs-reference.html&#34;&gt;Elastic Common Schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.splunk.com/Documentation/Splunk/8.0.5/Indexer/Indextimeversussearchtime&#34;&gt;Splunk - Index Time vs. Search Time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
